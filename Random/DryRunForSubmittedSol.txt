 [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
], 7
#rows = 3, # width = 4
 def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
         if matrix:
            row,col,width= len(matrix)-1,0,len(matrix[0])
            while row>=0 and col< width: 
                if matrix[row][col]==target:
                    return[row,col]
                elif matrix[row][col]>target:
                    row=row-1
                else:
                    col=col+1
            return [-1,-1]

row = 2, col = 0, width = 4
while(1):
matrix[2][0] (23) > (3)
	row -= 1
row = 1, col = 0, width = 4
while(2):
matrix[1][0](10) > (3):
	row -= 1
row = 0, col = 0, width = 4
while(3);
matrix[0][0] (1) < (3):
	col += 1
row = 0, col = 1, width = 4
while(3):
	matrix[0][1](3) == target(3)
	return

Run Time complxity = O(n+m) time
n is the length of rows and m is width

For smaller matriox size O(n+m) is optimized soution but for larger matrix O(log(mn)) == O(logm + logn) will be better
